import asyncio
import random
from datetime import datetime, time, date
from news_parser import fetch_latest_articles
from gpt_client import summarize_article
from telegram_bot import post_to_telegram

# --- –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ---
ACTIVE_START = time(8, 0)
ACTIVE_END = time(23, 0)
CHECK_INTERVAL_MINUTES = 5
POST_DELAY_RANGE = (60, 180)  # ‚è≥ –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏ (—Å–µ–∫—É–Ω–¥—ã, —Å–ª—É—á–∞–π–Ω–æ)

daily_titles = []
last_summary_date = date.today()


def is_active_hours() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–µ–π—á–∞—Å –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π."""
    now = datetime.now().time()
    return ACTIVE_START <= now <= ACTIVE_END


async def post_daily_summary():
    """–ü—É–±–ª–∏–∫—É–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –ø–æ—Å—Ç –∑–∞ –¥–µ–Ω—å."""
    global daily_titles

    if not daily_titles:
        print("üì≠ –ó–∞ –¥–µ–Ω—å –Ω–µ –±—ã–ª–æ –Ω–æ–≤–æ—Å—Ç–µ–π ‚Äî –∏—Ç–æ–≥ –Ω–µ –ø—É–±–ª–∏–∫—É–µ—Ç—Å—è.")
        return

    today_str = datetime.now().strftime("%d.%m.%Y")
    header = f"üóû <b>–ò—Ç–æ–≥–∏ –¥–Ω—è ({today_str})</b>\n\n"
    body = "\n".join([f"‚Ä¢ {t}" for t in daily_titles])
    text = header + body

    try:
        await post_to_telegram("–ò—Ç–æ–≥–∏ –¥–Ω—è", "", text)
        print("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –∏—Ç–æ–≥–∏ –¥–Ω—è.")
    except Exception as e:
        print(f"[Summary ERROR] {e}")

    # –æ—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    daily_titles = []


async def main_loop():
    global last_summary_date, daily_titles

    while True:
        now = datetime.now()
        current_time = now.time()

        # –Ω–æ–≤—ã–π –¥–µ–Ω—å ‚Äî –æ—á–∏—Å—Ç–∫–∞
        if date.today() != last_summary_date:
            print("üìÖ –ù–æ–≤—ã–π –¥–µ–Ω—å ‚Äî –æ—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π.")
            daily_titles = []
            last_summary_date = date.today()

        # –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤ –¥–Ω—è
        if current_time.hour == 23 and current_time.minute < CHECK_INTERVAL_MINUTES:
            print("üïö –í—Ä–µ–º—è –∏—Ç–æ–≥–æ–≤ –¥–Ω—è...")
            await post_daily_summary()
            await asyncio.sleep(60)
            continue

        # –Ω–æ—á—å—é –Ω–µ –ø—É–±–ª–∏–∫—É–µ–º
        if not is_active_hours():
            print("üåô –ù–æ—á—å ‚Äî –±–æ—Ç —Å–ø–∏—Ç –¥–æ —É—Ç—Ä–∞...")
            await asyncio.sleep(CHECK_INTERVAL_MINUTES * 60)
            continue

        print("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏...")
        articles = await fetch_latest_articles()

        if not articles:
            print("–ù–µ—Ç –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π.")
        else:
            for article in articles:
                print(f"üì∞ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {article['title']}")
                gpt = await summarize_article(article)
                if not gpt:
                    continue

                await post_to_telegram(
                    gpt_title=gpt["title"],
                    link=article["link"],
                    summary_ru=gpt["summary"],
                    image_url=article.get("image_url"),
                )

                daily_titles.append(gpt["title"])

                delay = random.randint(*POST_DELAY_RANGE)
                print(f"‚è≥ –ñ–¥—ë–º {delay} —Å–µ–∫ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –ø–æ—Å—Ç–æ–º...")
                await asyncio.sleep(delay)

        print(f"üí§ –°–ø–∏–º {CHECK_INTERVAL_MINUTES} –º–∏–Ω—É—Ç...\n")
        await asyncio.sleep(CHECK_INTERVAL_MINUTES * 60)


if __name__ == "__main__":
    asyncio.run(main_loop())
