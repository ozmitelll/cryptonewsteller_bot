import asyncio
import random
from datetime import datetime, time, date
from news_parser import fetch_latest_articles
from gpt_client import summarize_article
from telegram_bot import post_to_telegram

# --- –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ---
ACTIVE_START = time(8, 0)
ACTIVE_END   = time(23, 00)  # –≤—Ä–µ–º—è, –ö–û–ì–î–ê —É–∂–µ –º–æ–∂–Ω–æ –ø–æ–¥–≤–æ–¥–∏—Ç—å –∏—Ç–æ–≥–∏
CHECK_INTERVAL_MINUTES = 5
POST_DELAY_RANGE = (60, 180)

daily_titles = []
summary_date = date.today()
daily_summary_posted = False  # <- —Ñ–ª–∞–≥ ¬´–∏—Ç–æ–≥–∏ —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã —Å–µ–≥–æ–¥–Ω—è?¬ª

def is_active_hours() -> bool:
    now = datetime.now().time()
    return ACTIVE_START <= now <= ACTIVE_END

async def post_daily_summary():
    global daily_titles, daily_summary_posted
    if not daily_titles:
        print("üì≠ –ó–∞ –¥–µ–Ω—å –Ω–µ –±—ã–ª–æ –Ω–æ–≤–æ—Å—Ç–µ–π ‚Äî –∏—Ç–æ–≥ –Ω–µ –ø—É–±–ª–∏–∫—É–µ—Ç—Å—è.")
        daily_summary_posted = True
        return

    emojis = ["‚ö°", "üí∞", "üåê", "‚≠ê", "üöÄ", "üìà", "üìâ", "üíé", "ü™ô", "üî•"]
    formatted_items = [f"{random.choice(emojis)} <b>{t}</b>" for t in daily_titles]
    body = "\n\n".join(formatted_items)

    await post_to_telegram("–ò—Ç–æ–≥–∏ –¥–Ω—è", "", body, image_url=None, raw_html=True, with_link=False)
    print("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –∏—Ç–æ–≥–∏ –¥–Ω—è.")
    daily_titles = []
    daily_summary_posted = True

async def main_loop():
    global summary_date, daily_titles, daily_summary_posted

    while True:
        now_dt = datetime.now()

        # –ù–æ–≤—ã–π –¥–µ–Ω—å ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ –∏ —Ñ–ª–∞–≥ –∏—Ç–æ–≥–æ–≤
        if date.today() != summary_date:
            print("üìÖ –ù–æ–≤—ã–π –¥–µ–Ω—å ‚Äî –æ—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ —Ñ–ª–∞–≥ –∏—Ç–æ–≥–æ–≤.")
            daily_titles = []
            summary_date = date.today()
            daily_summary_posted = False

        # –ï—Å–ª–∏ –Ω–∞—Å—Ç—É–ø–∏–ª–æ/–ø—Ä–æ—à–ª–æ –≤—Ä–µ–º—è –∏—Ç–æ–≥–æ–≤ –∏ –∏—Ç–æ–≥–∏ –µ—â—ë –Ω–µ –ø—É–±–ª–∏–∫–æ–≤–∞–ª–∏—Å—å ‚Äî –ø—É–±–ª–∏–∫—É–µ–º
        if (now_dt.time() >= ACTIVE_END) and (not daily_summary_posted):
            print("üïö –í—Ä–µ–º—è –∏—Ç–æ–≥–æ–≤ –¥–Ω—è...")
            await post_daily_summary()
            # –Ω–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞, —á—Ç–æ–±—ã –Ω–µ –∑–∞–¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å
            await asyncio.sleep(60)
            continue

        # –ù–æ—á—å ‚Äî –Ω–µ –ø–æ—Å—Ç–∏–º, –ø—Ä–æ—Å—Ç–æ –∂–¥—ë–º
        if not is_active_hours():
            print("üåô –ù–æ—á—å ‚Äî –±–æ—Ç —Å–ø–∏—Ç –¥–æ –æ–∫–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...")
            await asyncio.sleep(CHECK_INTERVAL_MINUTES * 60)
            continue

        print("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏...")
        articles = await fetch_latest_articles()

        if not articles:
            print("–ù–µ—Ç –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π.")
        else:
            for article in articles:
                print(f"üì∞ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {article['title']}")
                gpt = await summarize_article(article)
                if not gpt:
                    continue

                await post_to_telegram(
                    gpt_title=gpt["title"],
                    link=article["link"],
                    summary_ru=gpt["summary"],
                    image_url=article.get("image_url"),
                )
                daily_titles.append(gpt["title"])

                delay = random.randint(*POST_DELAY_RANGE)
                print(f"‚è≥ –ñ–¥—ë–º {delay} —Å–µ–∫ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –ø–æ—Å—Ç–æ–º...")
                await asyncio.sleep(delay)

        print(f"üí§ –°–ø–∏–º {CHECK_INTERVAL_MINUTES} –º–∏–Ω—É—Ç...\n")
        await asyncio.sleep(CHECK_INTERVAL_MINUTES * 60)

if __name__ == "__main__":
    asyncio.run(main_loop())
